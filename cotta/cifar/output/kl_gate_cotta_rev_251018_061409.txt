[25/10/18 06:14:09] [conf.py:  219]: PyTorch Version: torch=2.9.0+cu128, cuda=12.8, cudnn=91002
[25/10/18 06:14:09] [conf.py:  221]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar10
  NUM_EX: 10000
  SEVERITY: [5]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: ./data
DESC: 
KL_GATE:
  THRESHOLD: 0.1
LOG_DEST: kl_gate_cotta_rev_251018_061409.txt
LOG_TIME: 251018_061409
MODEL:
  ADAPTATION: kl_gate_cotta_rev
  ARCH: Standard
  EPISODIC: False
OPTIM:
  AP: 0.92
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  MT: 0.999
  NESTEROV: True
  RST: 0.01
  STEPS: 1
  WD: 0.0
RNG_SEED: 1
SAVE_DIR: ./output
TEST:
  BATCH_SIZE: 400
[25/10/18 06:14:14] [kl_gate_cotta_rev.py:  162]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=10, bias=True)
)
[25/10/18 06:14:14] [kl_gate_cotta_rev.py:  163]: params for adaptation: ['conv1.weight', 'block1.layer.0.bn1.weight', 'block1.layer.0.bn1.bias', 'block1.layer.0.conv1.weight', 'block1.layer.0.bn2.weight', 'block1.layer.0.bn2.bias', 'block1.layer.0.conv2.weight', 'block1.layer.0.convShortcut.weight', 'block1.layer.1.bn1.weight', 'block1.layer.1.bn1.bias', 'block1.layer.1.conv1.weight', 'block1.layer.1.bn2.weight', 'block1.layer.1.bn2.bias', 'block1.layer.1.conv2.weight', 'block1.layer.2.bn1.weight', 'block1.layer.2.bn1.bias', 'block1.layer.2.conv1.weight', 'block1.layer.2.bn2.weight', 'block1.layer.2.bn2.bias', 'block1.layer.2.conv2.weight', 'block1.layer.3.bn1.weight', 'block1.layer.3.bn1.bias', 'block1.layer.3.conv1.weight', 'block1.layer.3.bn2.weight', 'block1.layer.3.bn2.bias', 'block1.layer.3.conv2.weight', 'block2.layer.0.bn1.weight', 'block2.layer.0.bn1.bias', 'block2.layer.0.conv1.weight', 'block2.layer.0.bn2.weight', 'block2.layer.0.bn2.bias', 'block2.layer.0.conv2.weight', 'block2.layer.0.convShortcut.weight', 'block2.layer.1.bn1.weight', 'block2.layer.1.bn1.bias', 'block2.layer.1.conv1.weight', 'block2.layer.1.bn2.weight', 'block2.layer.1.bn2.bias', 'block2.layer.1.conv2.weight', 'block2.layer.2.bn1.weight', 'block2.layer.2.bn1.bias', 'block2.layer.2.conv1.weight', 'block2.layer.2.bn2.weight', 'block2.layer.2.bn2.bias', 'block2.layer.2.conv2.weight', 'block2.layer.3.bn1.weight', 'block2.layer.3.bn1.bias', 'block2.layer.3.conv1.weight', 'block2.layer.3.bn2.weight', 'block2.layer.3.bn2.bias', 'block2.layer.3.conv2.weight', 'block3.layer.0.bn1.weight', 'block3.layer.0.bn1.bias', 'block3.layer.0.conv1.weight', 'block3.layer.0.bn2.weight', 'block3.layer.0.bn2.bias', 'block3.layer.0.conv2.weight', 'block3.layer.0.convShortcut.weight', 'block3.layer.1.bn1.weight', 'block3.layer.1.bn1.bias', 'block3.layer.1.conv1.weight', 'block3.layer.1.bn2.weight', 'block3.layer.1.bn2.bias', 'block3.layer.1.conv2.weight', 'block3.layer.2.bn1.weight', 'block3.layer.2.bn1.bias', 'block3.layer.2.conv1.weight', 'block3.layer.2.bn2.weight', 'block3.layer.2.bn2.bias', 'block3.layer.2.conv2.weight', 'block3.layer.3.bn1.weight', 'block3.layer.3.bn1.bias', 'block3.layer.3.conv1.weight', 'block3.layer.3.bn2.weight', 'block3.layer.3.bn2.bias', 'block3.layer.3.conv2.weight', 'bn1.weight', 'bn1.bias', 'fc.weight', 'fc.bias']
[25/10/18 06:14:14] [kl_gate_cotta_rev.py:  164]: optimizer for adaptation: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    decoupled_weight_decay: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0.0
)
[25/10/18 06:14:14] [kl_gate_cotta_rev.py:  165]: KL threshold (rev): 0.1
[25/10/18 06:14:14] [cifar10c_KL_rev.py:   78]: Running KL-Gate-Rev CoTTA with threshold: 0.1
[25/10/18 06:14:14] [cifar10c_KL_rev.py:   98]: resetting model
[25/10/18 06:16:58] [kl_gate_cotta_rev.py:  103]: KL-Gate-Rev triggered: KL=0.0000 < threshold=0.1000, skipping update
[25/10/18 06:17:02] [kl_gate_cotta_rev.py:  103]: KL-Gate-Rev triggered: KL=-0.0000 < threshold=0.1000, skipping update
[25/10/18 06:18:48] [cifar10c_KL_rev.py:  131]: Corruption: gaussian_noise5, Error: 24.40%, Updates: 23/25 (92.0%)
[25/10/18 06:18:48] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:20:40] [cifar10c_KL_rev.py:  131]: Corruption: shot_noise5, Error: 22.86%, Updates: 25/25 (96.0%)
[25/10/18 06:20:40] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:22:35] [cifar10c_KL_rev.py:  131]: Corruption: impulse_noise5, Error: 26.56%, Updates: 25/25 (97.3%)
[25/10/18 06:22:35] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:24:30] [cifar10c_KL_rev.py:  131]: Corruption: defocus_blur5, Error: 12.03%, Updates: 25/25 (98.0%)
[25/10/18 06:24:30] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:26:24] [cifar10c_KL_rev.py:  131]: Corruption: glass_blur5, Error: 28.08%, Updates: 25/25 (98.4%)
[25/10/18 06:26:24] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:28:19] [cifar10c_KL_rev.py:  131]: Corruption: motion_blur5, Error: 12.81%, Updates: 25/25 (98.7%)
[25/10/18 06:28:19] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:30:12] [cifar10c_KL_rev.py:  131]: Corruption: zoom_blur5, Error: 10.65%, Updates: 25/25 (98.9%)
[25/10/18 06:30:12] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:32:05] [cifar10c_KL_rev.py:  131]: Corruption: snow5, Error: 15.86%, Updates: 25/25 (99.0%)
[25/10/18 06:32:05] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:33:57] [cifar10c_KL_rev.py:  131]: Corruption: frost5, Error: 15.14%, Updates: 25/25 (99.1%)
[25/10/18 06:33:57] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:35:47] [cifar10c_KL_rev.py:  131]: Corruption: fog5, Error: 13.53%, Updates: 25/25 (99.2%)
[25/10/18 06:35:47] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:37:40] [cifar10c_KL_rev.py:  131]: Corruption: brightness5, Error: 7.66%, Updates: 25/25 (99.3%)
[25/10/18 06:37:40] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:39:34] [cifar10c_KL_rev.py:  131]: Corruption: contrast5, Error: 11.44%, Updates: 25/25 (99.3%)
[25/10/18 06:39:34] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:41:26] [cifar10c_KL_rev.py:  131]: Corruption: elastic_transform5, Error: 19.65%, Updates: 25/25 (99.4%)
[25/10/18 06:41:26] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:43:18] [cifar10c_KL_rev.py:  131]: Corruption: pixelate5, Error: 15.21%, Updates: 25/25 (99.4%)
[25/10/18 06:43:18] [cifar10c_KL_rev.py:  102]: not resetting model
[25/10/18 06:45:09] [cifar10c_KL_rev.py:  131]: Corruption: jpeg_compression5, Error: 19.29%, Updates: 25/25 (99.5%)
[25/10/18 06:45:09] [cifar10c_KL_rev.py:  140]: ============================================================
[25/10/18 06:45:09] [cifar10c_KL_rev.py:  144]: KL-Gate-Rev CoTTA Results (threshold=0.1):
[25/10/18 06:45:09] [cifar10c_KL_rev.py:  145]: Overall Error: 17.01%
[25/10/18 06:45:09] [cifar10c_KL_rev.py:  146]: Total Efficiency: 99.5% (373/375 updates)
[25/10/18 06:45:09] [cifar10c_KL_rev.py:  147]: Average Error per Corruption: 17.01%
[25/10/18 06:45:09] [cifar10c_KL_rev.py:  148]: ============================================================
